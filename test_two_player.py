import unittest 

import two_player as tp               # import functionality from our two_player.py file

# python -m unittest discover 

class TestTwoPlayer(unittest.TestCase):
    # make sure that everything is empty
    def test_start_position(self):
        tp.game_start()
        self.assertTrue(tp.player == 'x') 
        self.assertTrue(tp.TTT[0][0] == None)
        self.assertTrue(tp.TTT[2][2] == None) 
        self.assertTrue(tp.winner == None) 
    def test_row_winX(self):
        tp.game_start()
        self.assertTrue(tp.player == 'x') 
        tp.drawXO(1,1)
        tp.drawXO(2,1)
        tp.drawXO(1,2)
        tp.drawXO(2,2)
        tp.drawXO(3,2)
        self.assertTrue(tp.isGameOver)
        self.assertEqual(tp.winner, 'x') 
    def test_col_winX(self):
        tp.game_start() 
        self.assertFalse(tp.player == 'o') 
        tp.drawXO(1,1)
        tp.drawXO(1,2)
        tp.drawXO(2,1)
        tp.drawXO(2,2)
        tp.drawXO(3,1)
        self.assertTrue(tp.isGameOver)
        self.assertEqual(tp.winner, 'x') 
    def test_diag1_winX(self):
        tp.game_start()
        tp.drawXO(1,1)
        tp.drawXO(1,2)
        tp.drawXO(2,2)
        tp.drawXO(2,3)
        tp.drawXO(3,3)
        self.assertTrue(tp.isGameOver)
        self.assertEqual(tp.winner, 'x') 
    def test_diag2_winX(self):
        tp.game_start()
        tp.drawXO(1,3)
        tp.drawXO(1,2)
        tp.drawXO(2,2)
        tp.drawXO(2,1)
        tp.drawXO(3,1)
        self.assertTrue(tp.isGameOver)
        self.assertEqual(tp.winner, 'x')
    def test_row_winO(self):
        tp.game_start()
        self.assertTrue(tp.player == 'x') 
        tp.drawXO(1,1)
        tp.drawXO(1,2)
        tp.drawXO(2,3)
        tp.drawXO(2,2)
        tp.drawXO(1,3)
        tp.drawXO(3,2)
        self.assertTrue(tp.isGameOver)
        self.assertEqual(tp.winner, 'o') 
    def test_col_winO(self):
        tp.game_start() 
        self.assertFalse(tp.player == 'o') 
        tp.drawXO(1,1)
        tp.drawXO(1,2)
        tp.drawXO(2,1)
        tp.drawXO(2,2)
        tp.drawXO(3,3)
        tp.drawXO(3,2)
        self.assertTrue(tp.isGameOver)
        self.assertEqual(tp.winner, 'o') 
    def test_diag1_winO(self):
        tp.game_start()
        tp.drawXO(1,2)
        tp.drawXO(1,1)
        tp.drawXO(2,3)
        tp.drawXO(2,2)
        tp.drawXO(3,1)
        tp.drawXO(3,3)
        self.assertTrue(tp.isGameOver)
        self.assertEqual(tp.winner, 'o') 
    def test_diag2_winO(self):
        tp.game_start()
        tp.drawXO(1,2)
        tp.drawXO(1,3)
        tp.drawXO(2,1)
        tp.drawXO(2,2)
        tp.drawXO(3,2)
        tp.drawXO(3,1)
        self.assertTrue(tp.isGameOver)
        self.assertEqual(tp.winner, 'o')
    def test_draw1(self):
        tp.game_start() 
        tp.drawXO(2,2)
        tp.drawXO(1,2)
        tp.drawXO(2,3)
        tp.drawXO(2,1)
        tp.drawXO(1,1)
        tp.drawXO(3,3)
        tp.drawXO(1,3)
        tp.drawXO(3,1)
        tp.drawXO(3,2)
        self.assertTrue(tp.isGameOver)
        self.assertEqual(tp.winner == None)
    def test_draw2(self):
        tp.game_start()
        tp.drawXO(1,1)
        tp.drawXO(2,2)
        tp.drawXO(2,1)
        tp.drawXO(3,1)
        tp.drawXO(1,3)
        tp.drawXO(1,2)
        tp.drawXO(3,2)
        tp.drawXO(2,3)
        tp.drawXO(3,3)
        self.assertTrue(tp.isGameOver)
        self.assertEqual(tp.winner == None) 

# invoke tests using main method
if __name__ == '__main__':
    unittest.main() 
